/*
 * Copyright 2013 Xavier Hosxe
 *
 * Author: Xavier Hosxe (xavier . hosxe (at) gmail . com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "Env.h"

// ram_d1
float Env::incTab[1601] __attribute__((section(".instruction_ram")));

int Env::initTab = 0;


float envLinear[] = { 0.0f, 1.0f};

float envExponential[] = {
		0.000000,0.062148,0.120174,0.174684,0.225892,0.273997,0.319188,0.361640,
		0.401521,0.438985,0.474180,0.507242,0.538301,0.567478,0.594887,0.620636,
		0.644825,0.667548,0.688895,0.708948,0.727786,0.745483,0.762108,0.777725,
		0.792397,0.806179,0.819126,0.831289,0.842715,0.853449,0.863532,0.873005,
		0.881903,0.890263,0.898115,0.905493,0.912423,0.918933,0.925049,0.930794,
		0.936192,0.941262,0.946025,0.950499,0.954703,0.958651,0.962361,0.965846,
		0.969119,0.972195,0.975083,0.977797,0.980347,0.982742,0.984992,0.987105,
		0.989091,0.990956,0.992708,0.994354,0.995901,0.997353,0.998718,1.000000
};
//sqrt :
/*float envLog[] = {
		0.000000, 0.354948, 0.422107, 0.467138, 0.501972, 0.530771, 0.555524, 0.577350,
		0.596949, 0.614788, 0.631197, 0.646417, 0.660633, 0.673986, 0.686589, 0.698534,
		0.709896, 0.720737, 0.731110, 0.741060, 0.750624, 0.759836, 0.768724, 0.777315,
		0.785629, 0.793688, 0.801509, 0.809107, 0.816497, 0.823691, 0.830702, 0.837539,
		0.844214, 0.850733, 0.857106, 0.863340, 0.869442, 0.875418, 0.881274, 0.887015,
		0.892647, 0.898175, 0.903602, 0.908933, 0.914172, 0.919323, 0.924388, 0.929371,
		0.934276, 0.939104, 0.943860, 0.948544, 0.953160, 0.957710, 0.962195, 0.966619,
		0.970984, 0.975290, 0.979539, 0.983734, 0.987877, 0.991967, 0.996008, 1.000000
};*/
// sqrt
float envLog[] = {
		0.000000,0.125988,0.178174,0.218218,0.251976,0.281718,0.308607,0.333333,
		0.356348,0.377964,0.398410,0.417855,0.436436,0.454257,0.471405,0.487950,
		0.503953,0.519462,0.534522,0.549170,0.563436,0.577350,0.590937,0.604218,
		0.617213,0.629941,0.642416,0.654654,0.666667,0.678467,0.690066,0.701472,
		0.712697,0.723747,0.734631,0.745356,0.755929,0.766356,0.776643,0.786796,
		0.796819,0.806718,0.816497,0.826160,0.835711,0.845154,0.854493,0.863731,
		0.872872,0.881917,0.890871,0.899735,0.908514,0.917208,0.925820,0.934353,
		0.942809,0.951190,0.959497,0.967733,0.975900,0.983999,0.992032,1.000000
};
// cube root
/*float envLog[] = {
		0.000000,0.251316,0.316638,0.362460,0.398939,0.429744,0.456671,0.480750,
		0.502632,0.522758,0.541444,0.558921,0.575370,0.590928,0.605707,0.619798,
		0.633276,0.646204,0.658634,0.670612,0.682176,0.693361,0.704197,0.714709,
		0.724920,0.734852,0.744522,0.753947,0.763143,0.772122,0.780897,0.789479,
		0.797878,0.806104,0.814166,0.822071,0.829827,0.837440,0.844918,0.852265,
		0.859488,0.866592,0.873580,0.880459,0.887232,0.893904,0.900477,0.906955,
		0.913342,0.919641,0.925855,0.931987,0.938039,0.944014,0.949914,0.955742,
		0.961500,0.967189,0.972813,0.978372,0.983868,0.989304,0.994681,1.000000
};*/

void Env::init(struct EnvelopeParamsA *envParamsA, struct EnvelopeParamsB *envParamsB, uint8_t envNumber, float* algoNumber, int timbreNumber) {
	this->envParamsA = envParamsA;
	this->envParamsB = envParamsB;
	this->envNumber = envNumber;
	this->algoNumber = algoNumber;
	this->isLoop = checkIsLoop();
	this->timbreNumber = timbreNumber;

    if (initTab == 0) {
        initTab = 1;
        for (float k=1.0f; k<1601; k += 1.0f) {
            incTab[(int)(k + .005f)] = BLOCK_SIZE / PREENFM_FREQUENCY / (k / 100.0f);
        }
        // 1.0 to recognize it...
        incTab[0] = 1.0f;
    }

    // Init All ADSR
	for (int k=0; k<4; k++) {
		reloadADSR(k);
		reloadADSR(k + 4);
	}
}
